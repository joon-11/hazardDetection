[agent]
  interval = "1s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = ""
  omit_hostname = false
  

[[outputs.influxdb_v2]]
  urls = ["http://localhost:8086"]
  token = "5aPaACitnujzRW8hLfBBN4AcyEEk3wr0OX3qRWF3VxQvjMlg5STRZZ562uFSf1JBUiYWsDK3ELcwUafetkxDqQ=="
  organization = "joon"
  bucket = "modbus2"


[[inputs.modbus]]
name = "Device"
slave_id = 1
timeout = "1s"
# Serial (RS485; RS232)
controller = "COM6"
baud_rate = 9600
data_bits = 8
parity = "N"
stop_bits = 1
transmission_mode = "RTU"

# [[inputs.modbus.tags]]
# address = 256

## Trace the connection to the modbus device as debug messages
## Note: You have to enable telegraf's debug mode to see those messages!
# debug_connection = false

## Define the configuration schema
##  |---register -- define fields per register type in the original style (only supports one slave ID)
##  |---request  -- define fields on a requests base
configuration_type = "request"

# discrete_inputs = [
#   { name = "Start",          address = [0]},
#   { name = "Stop",           address = [1]},
#   { name = "Reset",          address = [2]},
#   { name = "EmergencyStop",  address = [3]},
# ]
# coils = [
#   { name = "Motor1-Run",     address = [0]},
#   { name = "Motor1-Jog",     address = [1]},
#   { name = "Motor1-Stop",    address = [2]},
# ]
[[inputs.modbus.request]]
slave_id = 1
byte_order = "ABCD"
register = "input"
fields = [
    { address=0, name="Sensor Type1", type="INT16"},
    { address=1, name="Data Update1", type="INT16"},
    { address=2, name="RSSI1", type="INT16"},
    { address=3, name="Temperature RAW1", type="INT16"},
    { address=4, name="Temperature1", type="INT16"},
    { address=6, name="CPU Temperature1", type="INT16"},
    { address=16, name="x1", type="INT16"},
    { address=17, name="y1", type="INT16"},
    { address=18, name="z1", type="INT16"},
    ##2번
    { address=48, name="Sensor Type2", type="INT16"},
    { address=49, name="Data Update2", type="INT16"},
    { address=50, name="RSSI2", type="INT16"},
    { address=51, name="Temperature RAW2", type="INT16"},
    { address=52, name="Temperature2", type="INT16"},
    { address=54, name="CPU Temperature2", type="INT16"},
    { address=64, name="x2", type="INT16"},
    { address=65, name="y2", type="INT16"},
    { address=66, name="z2", type="INT16"},
    ##3번
    { address=96, name="Sensor Type3", type="INT16"},
    { address=97, name="Data Update3", type="INT16"},
    { address=98, name="RSSI3", type="INT16"},
    { address=99, name="Temperature RAW3", type="INT16"},
    { address=100, name="Temperature3", type="INT16"},
    { address=102, name="CPU Temperature3", type="INT16"},
    { address=112, name="x3", type="INT16"},
    { address=113, name="y3", type="INT16"},
    { address=114, name="z3", type="INT16"},
    ##4번
    { address=256, name="Sensor Type4", type="INT16"},
    { address=257, name="Data Update4", type="INT16"},
    { address=258, name="RSSI4", type="INT16"},
    { address=259, name="Temperature RAW4", type="INT16"},
    { address=260, name="Temperature4", type="INT16"},
    { address=262, name="CPU Temperature4", type="INT16"},
    { address=272, name="x4", type="INT16"},
    { address=273, name="y4", type="INT16"},
    { address=274, name="z4", type="INT16"},
    ##5번
    { address=304, name="Sensor Type5", type="INT16"},
    { address=305, name="Data Update5", type="INT16"},
    { address=306, name="RSSI5", type="INT16"},
    { address=307, name="Temperature RAW5", type="INT16"},
    { address=308, name="Temperature5", type="INT16"},
    { address=310, name="CPU Temperature5", type="INT16"},
    { address=320, name="x5", type="INT16"},
    { address=321, name="y5", type="INT16"},
    { address=322, name="z5", type="INT16"},
    ##6번
    { address=352, name="Sensor Typ63", type="INT16"},
    { address=353, name="Data Update6", type="INT16"},
    { address=354, name="RSSI6", type="INT16"},
    { address=355, name="Temperature RAW6", type="INT16"},
    { address=356, name="Temperature6", type="INT16"},
    { address=358, name="CPU Temperature6", type="INT16"},
    { address=368, name="x6", type="INT16"},
    { address=369, name="y6", type="INT16"},
    { address=370, name="z6", type="INT16"}
  ]
  # [[inputs.modbus.request]]
  #   ## Holding example
  #   ## All of those examples will result in FLOAT64 field outputs
  #   slave_id = 1
  #   byte_order = "ABCD"
  #   register = "holding"
  #   fields = [
  #     { address=0, name="1"},
  #     { address=1, name="2"},
  #     { address=2, name="3"},
  #     { address=3, name="4"},
  #   ]


  # [[inputs.modbus.request]]
  #   ## Input example with type conversions
  #   slave_id = 1
  #   byte_order = "ABCD"
  #   register = "coil"
  #   fields = [
  #     { address=0, name="1"},  # will result in INT64 field
  #     { address=1, name="2"},  # will result in FLOAT64 field
  #     { address=2, name="3"},  # will result in FLOAT64 field
  #     { address=3, name="4"},  # will result in UIN64 field
  #   ]